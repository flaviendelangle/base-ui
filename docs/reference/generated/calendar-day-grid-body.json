{
  "name": "CalendarDayGridBody",
  "description": "Groups all rows of the calendar's day grid.\nRenders a `<div>` element.",
  "props": {
    "fixedWeekNumber": {
      "type": "number",
      "description": "Will render the requested amount of weeks by adding weeks of the next month if needed.\nPut it to 6 to create a Gregorian calendar where all months have the same amount of weeks displayed."
    },
    "focusOnMount": {
      "type": "boolean",
      "default": "false",
      "description": "If `true`, the first tabbable children inside this component will be focused on mount.\nWarning: If several components are rendered at the same time with focusOnMount={true}, the result might be unpredictable."
    },
    "freezeMonth": {
      "type": "boolean",
      "description": "If `true`, the component's month won't update when the visible date or the offset changes.\nThis is mostly useful when doing transitions between several months to avoid having the exiting month updated to the new visible date."
    },
    "offset": {
      "type": "number",
      "default": "0",
      "description": "The offset to apply to the rendered month compared to the current month.\nThis is mostly useful when displaying multiple day grids."
    },
    "children": {
      "type": "ReactNode | ((week: DateTime<boolean>, index: number, weeks: DateTime<boolean>[]) => ReactNode)",
      "description": "The children of the component.\nIf a function is provided, it will be called for each week to render as its parameter."
    },
    "className": {
      "type": "string | ((state: Calendar.DayGridBody.State) => string)",
      "description": "CSS class applied to the element, or a function that\nreturns a class based on the component’s state."
    },
    "render": {
      "type": "ReactElement | ((props: HTMLProps, state: Calendar.DayGridBody.State) => ReactElement)",
      "description": "Allows you to replace the component’s HTML element\nwith a different tag, or compose it with another component.\n\nAccepts a `ReactElement` or a function that returns the element to render."
    }
  },
  "dataAttributes": {},
  "cssVariables": {}
}
